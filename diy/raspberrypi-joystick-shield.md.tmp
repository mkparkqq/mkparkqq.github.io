---
title: \[Raspberry Pi\] joystick shield
utteranc: true
date: 2024-11-20 20:33 +0900
#last_modified_at: 2024-01-01 00:00 +0900
#permalink: /mariadb/test-framwork
#hit_count: false
categories:
  - Raspberry Pi
---

# 라즈베리 파이 joystick shield 연결

Raspberry Pi 3B+ 에 joystick shield를 연결해서 입력을 읽는 세 가지 방법

---

## WiringPi

* `sudo apt update && sudo apt install wiringpi`

```c
#include <wiringPi.h>
#include <stdio.h>

#define GPIO_PIN 0 // GPIO17은 WiringPi 핀 0

int main() {
    // 1. WiringPi 초기화
    if (wiringPiSetup() == -1) {
        printf("WiringPi setup failed\n");
        return 1;
    }

    // 2. GPIO 핀 설정
    pinMode(GPIO_PIN, INPUT);

    // 3. GPIO 값 읽기
    while (1) {
        int value = digitalRead(GPIO_PIN);
        printf("GPIO Value: %d\n", value);
        delay(1000); // 1초 대기
    }

    return 0;
}
```


## libgpiod

* 최신 GPIO 제어 라이브러리이다 
* `sudo apt install gpiod libgpiod-dev`

```c
#include <gpiod.h>
#include <stdio.h>
#include <unistd.h>

#define GPIO_CHIP "/dev/gpiochip0"
#define GPIO_LINE 17

int main() {
    struct gpiod_chip *chip;
    struct gpiod_line *line;
    int value;

    // 1. GPIO 칩 및 라인 초기화
    chip = gpiod_chip_open(GPIO_CHIP);
    if (!chip) {
        perror("Failed to open GPIO chip");
        return 1;
    }

    line = gpiod_chip_get_line(chip, GPIO_LINE);
    if (!line) {
        perror("Failed to get GPIO line");
        gpiod_chip_close(chip);
        return 1;
    }

    // 2. GPIO 라인 입력으로 설정
    if (gpiod_line_request_input(line, "gpio_read") < 0) {
        perror("Failed to request line as input");
        gpiod_chip_close(chip);
        return 1;
    }

    // 3. GPIO 값 읽기
    while (1) {
        value = gpiod_line_get_value(line);
        if (value < 0) {
            perror("Failed to read value");
        } else {
            printf("GPIO Value: %d\n", value);
        }
        sleep(1);
    }

    // 4. 정리
    gpiod_chip_close(chip);
    return 0;
}
```


## 파일 입출력

* 파일 시스템을 이용하기 때문에 추가적인 라이브러리가 필요 없다
* GPIO pin들은 `/sys/class/gpio` 디렉터리의 파일을 통해 접근 가능
* 데이터를 읽는 과정
    1. GPIO 핀 export로 활성화
    2. GPIO 방향을 **입력(input)**으로 설정
    3. 값 파일(`/sys/class/gpio/gpioN/value`)에서 읽기

```c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#define GPIO_PIN "17" // 사용할 GPIO 핀 번호

void export_gpio(const char *pin) {
    int fd = open("/sys/class/gpio/export", O_WRONLY);
    if (fd == -1) {
        perror("Failed to open export");
        exit(1);
    }
    write(fd, pin, sizeof(GPIO_PIN));
    close(fd);
}

void set_gpio_direction(const char *pin, const char *direction) {
    char path[35];
    snprintf(path, sizeof(path), "/sys/class/gpio/gpio%s/direction", pin);
    int fd = open(path, O_WRONLY);
    if (fd == -1) {
        perror("Failed to set direction");
        exit(1);
    }
    write(fd, direction, direction[0] == 'i' ? 2 : 3);
    close(fd);
}

int read_gpio_value(const char *pin) {
    char path[35];
    snprintf(path, sizeof(path), "/sys/class/gpio/gpio%s/value", pin);
    int fd = open(path, O_RDONLY);
    if (fd == -1) {
        perror("Failed to read value");
        exit(1);
    }
    char value;
    read(fd, &value, 1);
    close(fd);
    return value - '0'; // '0' 또는 '1' 반환
}

int main() {
    // 1. GPIO 핀 활성화
    export_gpio(GPIO_PIN);

    // 2. GPIO 방향 설정 (input)
    set_gpio_direction(GPIO_PIN, "in");

    // 3. GPIO 값 읽기
    while (1) {
        int value = read_gpio_value(GPIO_PIN);
        printf("GPIO Value: %d\n", value);
        sleep(1); // 1초 대기
    }

    return 0;
}
```

## references

* [KS0211 keyestudio RPI JoyStick Shield](https://wiki.keyestudio.com/KS0211_keyestudio_RPI_JoyStick_Shield#Sample_Code)
* [libgpiod 소스코드](https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/tree/lib/core.c?h=v1.5.x)

<!-- <img src="/img/process-relationships-01.png" alt="process-relationship diagram" /> -->

<hr id="utteranc-area-division">
<div id="utteranc-area">
    <script src="https://utteranc.es/client.js"
        repo="mkparkqq/qqDocs-comment"
        issue-term="pathname"
        theme="github-light"
        crossorigin="anonymous"
        async>
    </script>
</div>

