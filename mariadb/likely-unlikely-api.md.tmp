---
title: \[MariaDB\] 분기 최적화
utteranc: true
date: 2024-11-29 20:08 +0900
#last_modified_at: 2024-01-01 00:00 +0900
#permalink: /mariadb/test-framwork
#hit_count: false
categories:
  - MariaDB
---

# compiler-level if문 최적화

MariaDB 프로젝트에서는 `likely`, `unlikely` api를 사용하여 분기를 최적화한다.

---

## __builtin_expect

```c
long __builtin_expect (long expression, long value);
```

* 컴파일러에게 표현식이 어떤 값일 확률이 높다는 정보를 주는 방법이다. 컴파일러는 이 힌트를 이용해 최적화를 진행한다
    * cpu는 instruction 실행의 병렬성(parallelism)을 높이기 위해 branch prediction을 진행한다
    * instruction의 병렬성은 []instruction pipelining](https://en.wikipedia.org/wiki/Instruction_pipelining#Branches)을 통해 구현된다
* `value`에는 constant literal이 전달되어야 한다
* `expression`의 결과가 `value`일 경우 성능이 향상되지만 그렇지 못할 경우에 대가를 치르기 때문에 신중하게 사용해야 한다
* [switch문에 대해서도 최적화가 가능](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59521)하다

## likely unlikely

```c
/* Add checking if we are using likely/unlikely wrong */
#ifdef CHECK_UNLIKELY
C_MODE_START
extern void init_my_likely(), end_my_likely(FILE *);
extern int my_likely_ok(const char *file_name, uint line);
extern int my_likely_fail(const char *file_name, uint line);
C_MODE_END

#define likely(A) ((A) ? (my_likely_ok(__FILE__, __LINE__),1) : (my_likely_fail(__FILE__, __LINE__), 0))
#define unlikely(A) ((A) ? (my_likely_fail(__FILE__, __LINE__),1) : (my_likely_ok(__FILE__, __LINE__), 0))
/*
  These macros should be used when the check fails often when running benchmarks but
  we know for sure that the check is correct in a production environment
*/
#define checked_likely(A) (A)
#define checked_unlikely(A) (A)
#else
/**
  The semantics of builtin_expect() are that
  1) its two arguments are long
  2) it's likely that they are ==
  Those of our likely(x) are that x can be bool/int/longlong/pointer.
*/

#define likely(x)	__builtin_expect(((x) != 0),1)
#define unlikely(x)	__builtin_expect(((x) != 0),0)
#define checked_likely(x) likely(x)
#define checked_unlikely(x) unlikely(x)
#endif /* CHECK_UNLIKELY */
```

* MariaDB 프로젝트에서 최적화를 위해 사용하는 __builtin_expect 를 감싼 api
* `CHECK_UNLIKELY` 매크로를 켜서 분기 예측의 hit, miss 여부에 관한 통계를 수집해서 unlikely, likely 사용 여부를 결정하는 방식이다

## __builtin_expect로 인한 assembly code 변화

* gcc -O3 demo.c -o demo

```c

```

## references

* [\[IBM Documentation\] __builtin_expect](https://www.ibm.com/docs/en/xl-c-and-cpp-aix/16.1?topic=functions-builtin-expect)
* [Make \__builtin_expect effective in switch statements (PR middle-end/PR59521).](https://gcc.gnu.org/git/?p=gcc.git&a=commit;h=add4cbca8cf60d1108959de10a6c4b66d90464dc)
* [\[WIKIPEDIA\] Instruction Pipelining](https://en.wikipedia.org/wiki/Instruction_pipelining#Branches)


<!-- <img src="img/process-relationships-01.png" alt="process-relationship diagram" /> -->

<hr id="utteranc-area-division">
<div id="utteranc-area">
    <script src="https://utteranc.es/client.js"
        repo="mkparkqq/qqDocs-comment"
        issue-term="pathname"
        theme="github-light"
        crossorigin="anonymous"
        async>
    </script>
</div>

